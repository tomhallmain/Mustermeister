<div class="container mx-auto px-2 py-4">
  <div class="flex justify-between items-center mb-4">
    <h1 class="text-xl font-bold text-gray-900">My Tasks Board</h1>
    
    <div class="flex items-center space-x-4">
      <select id="project-filter" class="rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
        <option value="">All Projects</option>
        <% @projects.each do |project| %>
          <option value="<%= project.id %>" <%= 'selected' if @current_project&.id == project.id %>><%= project.title %></option>
        <% end %>
      </select>

      <select id="priority-filter" class="rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
        <option value="">All Priorities</option>
        <option value="high" <%= 'selected' if @priority_filter == 'high' %>>High</option>
        <option value="medium" <%= 'selected' if @priority_filter == 'medium' %>>Medium</option>
        <option value="low" <%= 'selected' if @priority_filter == 'low' %>>Low</option>
      </select>

      <select id="sort-by" class="rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
        <option value="updated_at" <%= 'selected' if @sort_by == 'updated_at' %>>Last Updated</option>
        <option value="created_at" <%= 'selected' if @sort_by == 'created_at' %>>Created Date</option>
        <option value="priority" <%= 'selected' if @sort_by == 'priority' %>>Priority</option>
      </select>

      <div class="relative">
        <input type="text" id="search-input" 
               class="rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50 pl-8"
               placeholder="Search tasks...">
        <div class="absolute inset-y-0 left-0 pl-2 flex items-center pointer-events-none">
          <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
          </svg>
        </div>
      </div>
    </div>

    <div class="flex items-center space-x-2">
      <label for="show-all-completed" class="text-sm text-gray-700">Show all completed tasks</label>
      <div class="relative inline-block w-10 mr-2 align-middle select-none">
        <input type="checkbox" id="show-all-completed" class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer"/>
        <label for="show-all-completed" class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer"></label>
      </div>
    </div>
  </div>

  <div id="kanban-board" class="flex space-x-2 overflow-x-auto pb-4">
    <% {
      not_started: 'Not Started',
      investigations: 'To Investigate',
      in_progress: 'In Progress',
      ready_to_test: 'Ready to Test',
      complete: 'Complete'
    }.each do |key, name| %>
      <div class="kanban-column flex-shrink-0 w-64 bg-gray-100 rounded-lg p-2" 
           data-status="<%= key %>"
           data-status-id="<%= Status.find_by(name: name)&.id %>">
        <h3 class="text-sm font-semibold text-gray-900 mb-2">
          <%= case key
              when 'investigations' then 'Investigations'
              when 'complete' then 'Complete'
              else name
              end %>
        </h3>
        <div class="kanban-tasks space-y-2 min-h-[200px]" data-status="<%= key %>">
          <!-- Tasks will be loaded here via JavaScript -->
        </div>
      </div>
    <% end %>
  </div>
</div>

<%= javascript_tag do %>
  document.addEventListener('DOMContentLoaded', function() {
    const board = document.getElementById('kanban-board');
    const projectFilter = document.getElementById('project-filter');
    const priorityFilter = document.getElementById('priority-filter');
    const sortBy = document.getElementById('sort-by');
    const showAllCompleted = document.getElementById('show-all-completed');
    const searchInput = document.getElementById('search-input');
    let currentPage = 1;
    let isLoading = false;
    let allTasks = {};  // Store all tasks for client-side filtering

    // Initialize Sortable for each column
    document.querySelectorAll('.kanban-tasks').forEach(function(column) {
      new Sortable(column, {
        group: 'tasks',
        animation: 150,
        ghostClass: 'bg-gray-200',
        onEnd: function(evt) {
          const taskId = evt.item.dataset.taskId;
          const newStatus = evt.to.dataset.status;
          updateTaskStatus(taskId, newStatus);
        }
      });
    });

    // Load tasks for all columns
    function loadTasks() {
      if (isLoading) return;
      isLoading = true;

      const params = new URLSearchParams({
        page: currentPage,
        sort_by: sortBy.value,
        show_all_completed: showAllCompleted.checked
      });

      if (projectFilter.value) {
        params.append('project_id', projectFilter.value);
      }

      if (priorityFilter.value) {
        params.append('priority', priorityFilter.value);
      }

      fetch(`/kanban/tasks?${params}`)
        .then(response => response.json())
        .then(data => {
          allTasks = data.tasks;  // Store all tasks
          filterAndDisplayTasks();
          updatePaginationControls(data.has_more);
          isLoading = false;
        })
        .catch(error => {
          console.error('Error loading tasks:', error);
          isLoading = false;
        });
    }

    // Filter and display tasks based on search and other filters
    function filterAndDisplayTasks() {
      const searchTerm = searchInput.value.toLowerCase();
      
      // Map backend statuses to display columns
      const statusMapping = {
        not_started: ['not_started'],
        investigations: ['to_investigate', 'investigated'],
        in_progress: ['in_progress'],
        ready_to_test: ['ready_to_test'],
        complete: ['complete', 'closed']
      };

      // Update each column with its tasks
      Object.entries(statusMapping).forEach(([displayStatus, backendStatuses]) => {
        const column = document.querySelector(`.kanban-tasks[data-status="${displayStatus}"]`);
        if (column) {
          // Combine tasks from all relevant backend statuses
          let tasks = backendStatuses.flatMap(status => allTasks[status] || []);
          
          // Apply search filter if search term exists
          if (searchTerm) {
            tasks = tasks.filter(task => 
              task.title.toLowerCase().includes(searchTerm) ||
              task.description.toLowerCase().includes(searchTerm) ||
              task.project.toLowerCase().includes(searchTerm)
            );
          }
          
          column.innerHTML = tasks.map(task => createTaskCard(task)).join('');
        }
      });
    }

    // Function to update pagination controls
    function updatePaginationControls(hasMore) {
      // Remove existing pagination buttons
      document.querySelectorAll('.pagination-btn').forEach(btn => btn.remove());
      
      // Add pagination buttons to each column
      document.querySelectorAll('.kanban-column').forEach(column => {
        if (currentPage > 1) {
          // Add previous page button when beyond first page
          const prevBtn = document.createElement('button');
          prevBtn.className = 'pagination-btn w-full mt-2 px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-indigo-600 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500';
          prevBtn.innerHTML = `
            <svg class="h-4 w-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
            Previous Page
          `;
          prevBtn.onclick = () => {
            currentPage--;
            loadTasks();
          };
          column.appendChild(prevBtn);

          // Add reset button when beyond first page
          const resetBtn = document.createElement('button');
          resetBtn.className = 'pagination-btn w-full mt-2 px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-indigo-600 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500';
          resetBtn.innerHTML = `
            <svg class="h-4 w-4 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Reset to First Page
          `;
          resetBtn.onclick = () => {
            currentPage = 1;
            loadTasks();
          };
          column.appendChild(resetBtn);
        }

        if (hasMore) {
          // Add load more button if there are more tasks
          const loadMoreBtn = document.createElement('button');
          loadMoreBtn.className = 'pagination-btn w-full mt-2 px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-indigo-600 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500';
          loadMoreBtn.innerHTML = `
            Load More
            <svg class="h-4 w-4 inline-block ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          `;
          loadMoreBtn.onclick = () => {
            currentPage++;
            loadTasks();
          };
          column.appendChild(loadMoreBtn);
        }
      });
    }

    // Create task card HTML
    function createTaskCard(task) {
      const truncateText = (text, maxWordLength, maxLineLength, maxLines) => {
        if (!text) return '';
        
        // Split into words
        const words = text.split(/\s+/);
        
        // Check for long words
        const longWordIndex = words.findIndex(word => word.length >= maxWordLength);
        if (longWordIndex !== -1) {
          const longWord = words[longWordIndex];
          const truncatedWords = words.slice(0, longWordIndex);
          return truncatedWords.join(' ') + ' ' + longWord.substring(0, maxWordLength - 10) + '...';
        }
        
        // Count lines based on character width
        let currentLineLength = 0;
        let lineCount = 1;
        let truncatedWords = [];
        
        for (const word of words) {
          // Add word length plus a space
          const wordLength = word.length + 1;
          
          // If adding this word would exceed line length, start a new line
          if (currentLineLength + wordLength > maxLineLength) {
            lineCount++;
            currentLineLength = wordLength;
          } else {
            currentLineLength += wordLength;
          }
          
          // If we've hit max lines, stop
          if (lineCount > maxLines) {
            return truncatedWords.join(' ') + '...';
          }
          
          truncatedWords.push(word);
        }
        
        return text;
      };

      return `
        <div class="bg-white rounded-lg shadow p-2 cursor-move" data-task-id="${task.id}">
          <div class="flex justify-between items-start mb-1">
            <h4 class="font-medium text-sm text-gray-900">
              <a href="/tasks/${task.id}" class="hover:text-blue-600 hover:underline">${truncateText(task.title, 20, 20, 4)}</a>
            </h4>
            <span class="px-1.5 py-0.5 text-xs rounded-full ${
              task.priority === 'high' ? 'bg-red-100 text-red-800' :
              task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
              task.priority === 'leisure' ? 'bg-purple-100 text-purple-800' :
              'bg-green-100 text-green-800'
            }">
              ${task.priority}
            </span>
          </div>
          <p class="text-xs text-gray-600 mb-1 whitespace-pre-line">${truncateText(task.description, 40, 40, 10)}</p>
          <div class="flex justify-between items-center text-xs text-gray-500">
            <span>${task.project}</span>
            <span>${new Date(task.updated_at).toLocaleDateString()}</span>
          </div>
        </div>
      `;
    }

    // Update task status
    function updateTaskStatus(taskId, newStatus) {
      const statusMapping = {
        not_started: 'Not Started',
        investigations: 'To Investigate',  // Use the first status for investigations
        in_progress: 'In Progress',
        ready_to_test: 'Ready to Test',
        complete: 'Complete'  // Use Complete status for the complete column
      };

      fetch(`/tasks/${taskId}?kanban=true`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({
          task: {
            status_name: statusMapping[newStatus]
          }
        })
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.error || 'Failed to update task status');
          });
        }
        loadTasks(); // Reload tasks to ensure correct order
      })
      .catch(error => {
        console.error('Error updating task status:', error);
        alert(error.message); // Show error to user
        loadTasks(); // Reload tasks to reset the board
      });
    }

    // Add event listeners for filters
    projectFilter.addEventListener('change', loadTasks);
    priorityFilter.addEventListener('change', function() {
      // If priority filter is set and sort is by priority, change to updated_at
      if (this.value && sortBy.value === 'priority') {
        sortBy.value = 'updated_at';
      }
      loadTasks();
    });
    sortBy.addEventListener('change', loadTasks);
    showAllCompleted.addEventListener('change', loadTasks);
    searchInput.addEventListener('input', filterAndDisplayTasks);

    // Initial load
    loadTasks();
  });
<% end %>

<style>
  .toggle-checkbox:checked {
    right: 0;
    border-color: #68D391;
  }
  .toggle-checkbox:checked + .toggle-label {
    background-color: #68D391;
  }
</style> 