<div class="container mx-auto px-2 py-4">
  <div class="flex justify-between items-center mb-4">
    <h1 class="text-xl font-bold text-gray-900">Kanban Board</h1>
    
    <div class="flex space-x-2">
      <div class="relative">
        <select id="project-filter" class="block appearance-none bg-white border border-gray-300 text-gray-700 py-1 px-2 pr-6 text-sm rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500">
          <option value="">All Projects</option>
          <% @projects.each do |project| %>
            <option value="<%= project.id %>" <%= 'selected' if @current_project&.id == project.id %>>
              <%= project.title %>
            </option>
          <% end %>
        </select>
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-1 text-gray-700">
          <svg class="fill-current h-3 w-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
            <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
          </svg>
        </div>
      </div>

      <div class="relative">
        <select id="sort-by" class="block appearance-none bg-white border border-gray-300 text-gray-700 py-1 px-2 pr-6 text-sm rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500">
          <option value="updated_at" <%= 'selected' if @sort_by == 'updated_at' %>>Last Updated</option>
          <option value="created_at" <%= 'selected' if @sort_by == 'created_at' %>>Created Date</option>
          <option value="title" <%= 'selected' if @sort_by == 'title' %>>Title</option>
          <option value="priority" <%= 'selected' if @sort_by == 'priority' %>>Priority</option>
        </select>
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-1 text-gray-700">
          <svg class="fill-current h-3 w-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
            <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
          </svg>
        </div>
      </div>
    </div>
  </div>

  <div id="kanban-board" class="flex space-x-2 overflow-x-auto pb-4">
    <% {
      not_started: 'Not Started',
      investigations: 'Investigations',
      in_progress: 'In Progress',
      ready_to_test: 'Ready to Test',
      complete: 'Complete'
    }.each do |key, name| %>
      <div class="kanban-column flex-shrink-0 w-64 bg-gray-100 rounded-lg p-2" data-status="<%= key %>">
        <h3 class="text-sm font-semibold text-gray-900 mb-2"><%= name %></h3>
        <div class="kanban-tasks space-y-2 min-h-[200px]" data-status="<%= key %>">
          <!-- Tasks will be loaded here via JavaScript -->
        </div>
      </div>
    <% end %>
  </div>
</div>

<%= javascript_tag do %>
  document.addEventListener('DOMContentLoaded', function() {
    const board = document.getElementById('kanban-board');
    const projectFilter = document.getElementById('project-filter');
    const sortBy = document.getElementById('sort-by');
    let currentPage = 1;
    let isLoading = false;

    // Initialize Sortable for each column
    document.querySelectorAll('.kanban-tasks').forEach(function(column) {
      new Sortable(column, {
        group: 'tasks',
        animation: 150,
        ghostClass: 'bg-gray-200',
        onEnd: function(evt) {
          const taskId = evt.item.dataset.taskId;
          const newStatus = evt.to.dataset.status;
          updateTaskStatus(taskId, newStatus);
        }
      });
    });

    // Load tasks for all columns
    function loadTasks() {
      if (isLoading) return;
      isLoading = true;

      const params = new URLSearchParams({
        page: currentPage,
        sort_by: sortBy.value
      });

      if (projectFilter.value) {
        params.append('project_id', projectFilter.value);
      }

      fetch(`/kanban/tasks?${params}`)
        .then(response => response.json())
        .then(data => {
          // Map backend statuses to display columns
          const statusMapping = {
            not_started: ['not_started'],
            investigations: ['to_investigate', 'investigated_not_started'],
            in_progress: ['in_progress'],
            ready_to_test: ['ready_to_test'],
            complete: ['complete', 'closed']
          };

          // Update each column with its tasks
          Object.entries(statusMapping).forEach(([displayStatus, backendStatuses]) => {
            const column = document.querySelector(`.kanban-tasks[data-status="${displayStatus}"]`);
            if (column) {
              // Combine tasks from all relevant backend statuses
              const tasks = backendStatuses.flatMap(status => data.tasks[status] || []);
              column.innerHTML = tasks.map(task => createTaskCard(task)).join('');
            }
          });
          isLoading = false;
        })
        .catch(error => {
          console.error('Error loading tasks:', error);
          isLoading = false;
        });
    }

    // Create task card HTML
    function createTaskCard(task) {
      return `
        <div class="bg-white rounded-lg shadow p-2 cursor-move" data-task-id="${task.id}">
          <div class="flex justify-between items-start mb-1">
            <h4 class="font-medium text-sm text-gray-900">
              <a href="/tasks/${task.id}" class="hover:text-blue-600 hover:underline">${task.title}</a>
            </h4>
            <span class="px-1.5 py-0.5 text-xs rounded-full
              ${task.priority === 'high' ? 'bg-red-100 text-red-800' :
                task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                'bg-green-100 text-green-800'}">
              ${task.priority}
            </span>
          </div>
          <p class="text-xs text-gray-600 mb-1">${task.description || ''}</p>
          <div class="flex justify-between items-center text-xs text-gray-500">
            <span>${task.project}</span>
            <span>${new Date(task.updated_at).toLocaleDateString()}</span>
          </div>
        </div>
      `;
    }

    // Update task status
    function updateTaskStatus(taskId, newStatus) {
      fetch(`/tasks/${taskId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({
          task: {
            status_id: document.querySelector(`.kanban-column[data-status="${newStatus}"]`).dataset.statusId
          }
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to update task status');
        }
        loadTasks(); // Reload tasks to ensure correct order
      })
      .catch(error => {
        console.error('Error updating task status:', error);
        loadTasks(); // Reload tasks to reset the board
      });
    }

    // Event listeners for filters
    projectFilter.addEventListener('change', () => {
      currentPage = 1;
      loadTasks();
    });

    sortBy.addEventListener('change', () => {
      currentPage = 1;
      loadTasks();
    });

    // Initial load
    loadTasks();
  });
<% end %> 